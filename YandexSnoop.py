import logging
import asyncio
from aiogram import Bot, Dispatcher, types, Router
from aiogram.types import ContentType, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime
import yadisk
from dotenv import load_dotenv
import os
import requests
import time

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

API_TOKEN = os.getenv('BOT_API_TOKEN')  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
YANDEX_DISK_TOKEN = os.getenv('YANDEX_DISK_TOKEN')  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Dispatcher —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–π
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
y = yadisk.YaDisk(token=YANDEX_DISK_TOKEN)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã", "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É" –∏ "–ü–æ–∏—Å–∫"
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì§–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã")],
        [KeyboardButton(text="üóëÔ∏è–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")],
        [KeyboardButton(text="üîé–ü–æ–∏—Å–∫")]
    ],
    resize_keyboard=True
)

class UploadStates(StatesGroup):
    waiting_for_upload = State()

class SearchStates(StatesGroup):
    waiting_for_query = State()

async def send_welcome_message():
    chat_id = os.getenv('CHAT_ID')  # –ü–æ–ª—É—á–µ–Ω–∏–µ chat_id –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    await bot.send_message(chat_id, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –≤–∞–º –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=keyboard)

async def upload_to_yandex_disk(file, file_name, folder_type):
    folder_name = datetime.now().strftime('%B_%Y')
    folder_path = f"{folder_name}/{folder_type}"

    if not y.exists(folder_name):
        y.mkdir(folder_name)
    if not y.exists(folder_path):
        y.mkdir(folder_path)

    file_path = f"{folder_path}/{file_name}"
    if y.exists(file_path):
        return False  # –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

    y.upload(file, file_path)
    return True  # –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω

@router.message(lambda message: message.text == "üì§–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã")
async def initiate_upload(message: types.Message, state: FSMContext):
    logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã'")
    await message.reply("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª—ã –∏ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Yandex.Disk, –¥–ª—è —ç—Ç–æ–≥–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ")
    await state.set_state(UploadStates.waiting_for_upload)

@router.message(UploadStates.waiting_for_upload, lambda message: message.content_type == ContentType.DOCUMENT)
async def handle_docs(message: types.Message, state: FSMContext):
    document = message.document
    file_info = await bot.get_file(document.file_id)
    file_path = file_info.file_path
    file_name = document.file_name

    file = await bot.download_file(file_path)

    if await upload_to_yandex_disk(file, file_name, "–§–∞–π–ª—ã"):
        await message.reply("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ Yandex.Disk –≤ –ø–∞–ø–∫—É '–§–∞–π–ª—ã'")
    else:
        await message.reply("–§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ Yandex.Disk")
    await state.clear()

@router.message(UploadStates.waiting_for_upload, lambda message: message.content_type == ContentType.PHOTO)
async def handle_photos(message: types.Message, state: FSMContext):
    photo = message.photo[-1]
    file_info = await bot.get_file(photo.file_id)
    file_path = file_info.file_path
    file_name = f"{photo.file_id}.jpg"

    file = await bot.download_file(file_path)

    if await upload_to_yandex_disk(file, file_name, "–§–æ—Ç–æ"):
        await message.reply("–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ Yandex.Disk –≤ –ø–∞–ø–∫—É '–§–æ—Ç–æ'")
    else:
        await message.reply("–§–æ—Ç–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ Yandex.Disk")
    await state.clear()

@router.message(UploadStates.waiting_for_upload, lambda message: message.content_type == ContentType.VIDEO)
async def handle_videos(message: types.Message, state: FSMContext):
    video = message.video
    file_info = await bot.get_file(video.file_id)
    file_path = file_info.file_path
    file_name = f"{video.file_id}.mp4"

    file = await bot.download_file(file_path)

    if await upload_to_yandex_disk(file, file_name, "–í–∏–¥–µ–æ"):
        await message.reply("–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ Yandex.Disk –≤ –ø–∞–ø–∫—É '–í–∏–¥–µ–æ'")  # –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
    else:
        await message.reply("–í–∏–¥–µ–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ Yandex.Disk")
    await state.clear()

@router.message(UploadStates.waiting_for_upload, lambda message: message.content_type == ContentType.AUDIO)
async def handle_audio(message: types.Message, state: FSMContext):
    audio = message.audio
    file_info = await bot.get_file(audio.file_id)
    file_path = file_info.file_path
    file_name = f"{audio.file_id}.mp3"

    file = await bot.download_file(file_path)

    if await upload_to_yandex_disk(file, file_name, "–ú—É–∑—ã–∫–∞"):
        await message.reply("–ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ Yandex.Disk –≤ –ø–∞–ø–∫—É '–ú—É–∑—ã–∫–∞'")
    else:
        await message.reply("–ê—É–¥–∏–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ Yandex.Disk")
    await state.clear()

@router.message(lambda message: message.text == "üóëÔ∏è–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
async def clear_trash(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º OAuth —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        token = os.getenv('YANDEX_DISK_TOKEN')

        # URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—Ä–∑–∏–Ω–µ
        url_info = "https://cloud-api.yandex.net/v1/disk/trash/resources"

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        headers = {
            "Authorization": f"OAuth {token}"
        }

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—Ä–∑–∏–Ω–µ
        params_info = {
            "path": "/"
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—Ä–∑–∏–Ω–µ
        response_info = requests.get(url_info, headers=headers, params=params_info)

        if response_info.status_code == 200:
            trash_info = response_info.json()
            if trash_info['_embedded']['total'] == 0:
                await message.reply("–ö–æ—Ä–∑–∏–Ω–∞ —É–∂–µ –ø—É—Å—Ç–∞", reply_markup=keyboard)
                return
        else:
            await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—Ä–∑–∏–Ω–µ: {response_info.json()}", reply_markup=keyboard)
            return

        # URL –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
        url_clear = "https://cloud-api.yandex.net/v1/disk/trash/resources"

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
        params_clear = {
            "path": "/",
            "permanently": "true"
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—á–∏—Å—Ç–∫—É –∫–æ—Ä–∑–∏–Ω—ã
        response_clear = requests.delete(url_clear, headers=headers, params=params_clear)

        if response_clear.status_code == 202:
            operation_href = response_clear.json().get('href')
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
            while True:
                operation_status = requests.get(operation_href, headers=headers)
                if operation_status.status_code == 200:
                    status = operation_status.json().get('status')
                    if status == 'success':
                        await message.reply("–ö–æ—Ä–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞", reply_markup=keyboard)
                        break
                    elif status == 'failed':
                        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã", reply_markup=keyboard)
                        break
                time.sleep(1)  # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        elif response_clear.status_code == 204:
            await message.reply("–ö–æ—Ä–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞", reply_markup=keyboard)
        else:
            await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã: {response_clear.json()}", reply_markup=keyboard)
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã: {e}")

def search_files_and_folders_recursive(path, query):
    search_results = []
    for item in y.listdir(path):
        logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞: {item['name']} (—Ç–∏–ø: {item['type']})")
        if item['type'] == 'dir':
            if query.lower() in item['name'].lower():
                search_results.append(item['path'])
            search_results.extend(search_files_and_folders_recursive(item['path'], query))
        elif item['type'] == 'file' and query.lower() in item['name'].lower():
            search_results.append(item['path'])
    return search_results

@router.message(lambda message: message.text == "üîé–ü–æ–∏—Å–∫")
async def initiate_search(message: types.Message, state: FSMContext):
    logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–ü–æ–∏—Å–∫'")
    await message.reply("–ö–∞–∫–∏–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –ø–∞–ø–∫–∏ –≤—ã –∂–µ–ª–∞–µ—Ç–µ –Ω–∞–π—Ç–∏?")
    await state.set_state(SearchStates.waiting_for_query)

@router.message(SearchStates.waiting_for_query)
async def search_files(message: types.Message, state: FSMContext):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫: {message.text}")
    query = message.text
    if not query:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞.")
        return

    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫
    search_results = search_files_and_folders_recursive("/", query)
    logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è '{query}': {search_results}")

    if not search_results:
        await message.reply("–§–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    else:
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
        results_message = "\n".join(search_results)
        await message.reply(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏:\n{results_message}")

    await state.clear()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
dp.include_router(router)

async def main():
    dp['bot'] = bot  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º bot –≤ Dispatcher
    await send_welcome_message()  # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())